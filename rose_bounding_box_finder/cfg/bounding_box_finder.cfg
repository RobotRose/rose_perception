#!/usr/bin/env python
PACKAGE = "bounding_box_finder"

#//Defines for VoxelGrid
##define LEAF_SIZE           0.01          //Meter
##define DEPTH_LIMIT         1.0           //Meter
#
#//Defines for planar segmentation
##define PLANAR_THRESHOLD    0.02          //Meter
##define PLANE_FILTER_LIMIT  0.3           //Part of total cloud
#
#//Defines for Clustering
##define MIN_CLUSTER_SIZE    100           //Minimal Number of Points in Cluster
##define MAX_CLUSTER_SIZE    25000         //Maximum Number of Points in Cluster
##define CLUSTER_TOLERANCE   0.02          //CM Furthest distance between point to be seen as one cluster
#
#//Defines for calculateOrientedBoundingBoxByRotation
##define OBJECT_FRAME        "/base_link"  //Frame to which the cluster points are transformed
##define INCREMENT           0.02          //Radian

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("leaf_size_param", double_t, 0, "Leaf Size for VoxelGrid (m)", 0.01, 0.001, 0.1)
gen.add("depth_limit_param", double_t, 0, "Depth limit every point beyond this distance (m) is discarded", 1.5, 0.4, 4.0)
gen.add("planar_threshold_param", double_t, 0, "Plane padding for planar segmentation (m)", 0.02, 0.0, 0.05)
gen.add("plane_filter_limit_param", double_t, 0, "Planar segmentation keeps filtering planes until this part of the original cloud is left", 0.3, 0.0, 1.0)
gen.add("min_cluster_size_param", int_t, 0, "Minimal Number of Points defining a cluster", 100, 1, 25000)
gen.add("max_cluster_size_param", int_t, 0, "Maximum Number of Points defining a cluster", 25000, 1, 25000)
gen.add("cluster_tolerance_param", double_t, 0, "Furthest distance between points to be seen as one cluster (m)", 0.02, 0.0, 0.10)
gen.add("object_frame_param", str_t, 0, "Frame to which the cluster points are transformed", "camera_link")
gen.add("radian_increment_param", double_t, 0, "Size of the steps taken when rotating the pointcluster to determine the orientation (radian)", 0.02, 0.01, 1.57)
gen.add("enable_continuous_operation_param", bool_t, 0, "When true the algoritm keeps operating without the need for a Goal from SMC", True)

#size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                  gen.const("Medium", int_t, 1, "A medium constant"),
#                  gen.const("Large", int_t, 2, "A large constant"),
#                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                  "An enum to set size")
#
#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "bounding_box_finder", "bounding_box_finder"))

map